// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
// Solution by Nathanael Whitrow (n8)
// 31/08/2019


/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // phase 1: zeroes
    Mux16(a=x, b=false, sel=zx, out=zxout);
    Mux16(a=y, b=false, sel=zy, out=zyout);

    // phase 2: not inputs
    Not16(in=zxout, out=notx);
    Not16(in=zyout, out=noty);
    Mux16(a=zxout, b=notx, sel=nx, out=nxout);
    Mux16(a=zyout, b=noty, sel=ny, out=nyout);

    // phase 3: function:
    Add16(a=nxout, b=nyout, out=adderout);
    And16(a=nxout, b=nyout, out=xANDy);
    Mux16(a=xANDy, b=adderout, sel=f, out=fout);

    // phase 4: notOutput
    Not16(in=fout, out=notfout);
    Mux16(a=fout, b=notfout, sel=no, out[15]=ng,
        out[0]=zr0,
        out[1]=zr1,
        out[2]=zr2,
        out[3]=zr3,
        out[4]=zr4,
        out[5]=zr5,
        out[6]=zr6,
        out[7]=zr7,
        out[8]=zr8,
        out[9]=zr9,
        out[10]=zr10,
        out[11]=zr11,
        out[12]=zr12,
        out[13]=zr13,
        out[14]=zr14,
        out[15]=zr15,    
    out=out);

    Or(a=zr0, b=false, out=or1);
    Or(a=zr1, b=or1, out=or2);
    Or(a=zr2, b=or2, out=or3);
    Or(a=zr3, b=or3, out=or4);
    Or(a=zr4, b=or4, out=or5);
    Or(a=zr5, b=or5, out=or6);
    Or(a=zr6, b=or6, out=or7);
    Or(a=zr7, b=or7, out=or8);
    Or(a=zr8, b=or8, out=or9);
    Or(a=zr9, b=or9, out=or10);
    Or(a=zr10, b=or10, out=or11);
    Or(a=zr11, b=or11, out=or12);
    Or(a=zr12, b=or12, out=or13);
    Or(a=zr13, b=or13, out=or14);
    Or(a=zr14, b=or14, out=or15);
    Or(a=zr15, b=or15, out=or16);
    Not(in=or16, out=zr);
}